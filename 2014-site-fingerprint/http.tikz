% measure the text we're going to use, so we can force consistent text
% alignment; we do this with primitive TeX for efficiency
% I *think* box register 0 is scratch, but it's hard to tell
\begingroup
\setbox0=\hbox{\scriptsize%
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz}
\newdimen\lht \lht=\ht0
\newdimen\ldp \ldp=\dp0
%
\begin{figure*}%
\begin{tikzpicture}[x=1cm,y=-1cm,
    annote/.style={
        rectangle,%draw, help lines,
        text width=7cm,%text=black,
        anchor=west,
        align=justify,
        font=\footnotesize
},
    csctrl/.style = {
        isosceles triangle, anchor=lower side, shape border rotate=90,
        fill=black, inner sep=0pt, outer sep=0pt, minimum width=1.5mm,
        prefix after command={\pgfextra{\tikzset{every label/.style={
            font={\scriptsize\scshape}, text height=\lht, text depth=\ldp
        }}}}
},
    scctrl/.style = {
        isosceles triangle, anchor=lower side, shape border rotate=270,
        fill=black, inner sep=0pt, outer sep=0pt, minimum width=1.5mm,
        prefix after command={\pgfextra{\tikzset{every label/.style={
            font={\scriptsize\scshape}, text height=\lht, text depth=\ldp,
            label position=below
        }}}}
},
    cs/.style={
        trapezium, trapezium angle=67.5,
        anchor=bottom side, shape border rotate=0, fill=black,
        inner ysep=.89mm, inner xsep=0pt, outer sep=0pt,
        prefix after command={\pgfextra{\tikzset{every label/.style={
            font={\scriptsize}, text height=\lht, text depth=\ldp,
        }}}}
},
    sc/.style={
        trapezium, trapezium angle=67.5,
        anchor=bottom side, shape border rotate=180, fill=black,
        inner ysep=.89mm, inner xsep=0pt, outer sep=0pt,
        prefix after command={\pgfextra{\tikzset{every label/.style={
            font={\scriptsize}, text height=\lht, text depth=\ldp,
            label position=below
        }}}}
},
]
%\draw [help lines] (0,0) rectangle (16.5,25) ;

\coordinate (ancol) at (9,0) ;

\begin{scope}[xshift=-0.75cm,yshift=-0.425cm,local bounding box=basehttp]
\node [csctrl,label={syn}] at (1.075,1) {};
\node [scctrl,label={$\mbox{syn}\atop\mbox{ack}$}] at (1.325,1) {};
\node [csctrl,label={ack}] at (1.575,1) {};
\node [cs,inner xsep=4mm,label={Request}] at (2.5,1) {};
\node (r1) [sc,inner xsep=4mm] at (4,1) {};
\node (r2) [sc,inner xsep=4mm] at (5,1) {};
\node (r3) [sc,inner xsep=4mm] at (6,1) {};
\node (r4) [sc,inner xsep=2mm] at (6.8,1) {};
\node [scctrl,label={fin}] at (7.2,1) {};
\node [csctrl,label={$\mbox{fin}\atop\mbox{ack}$}] at (7.45,1) {};
\node [scctrl,label={ack}] at (7.675,1) {};

\coordinate [below=1.25mm] (rl) at (r1.west) ;
\coordinate [below=1.25mm] (rr) at (r4.east) ;
\draw [decorate,decoration={brace,amplitude=1mm}] (rr) -- (rl) ;
\draw [] (1,1) -- (7.75,1) ;
\node [below] at ($(rl)!0.5!(rr)$) {\scriptsize Response} ;
\end{scope}

%\draw [help lines] (basehttp.north west) rectangle (basehttp.south east);

\node [annote] at (basehttp -| ancol) {%
   In HTTP, the client speaks first, sending a \emph{request}
   which receives a \emph{response} from the server.  The request
   has an in-band terminator, but originally, the response ended
   when the server closed the TCP connection.  Rendering an HTML
   page often requires many requests and responses, so this is
   inefficient.
};

\begin{scope}[xshift=-0.75cm,yshift=-0.25cm,local bounding box=sconns]
\node [cs,inner xsep=4mm] at (1.475,3.825) {};
\node [sc,inner xsep=4mm] at (2.525,3.825) {};
\node [sc,inner xsep=4mm] at (3.525,3.825) {};
\node [sc,inner xsep=4mm] at (4.525,3.825) {};

\node [cs,inner xsep=3mm] at (3.375,4.5) {};
\node [sc,inner xsep=4mm] at (4.525,4.5) {};
\node [sc,inner xsep=4mm] at (5.525,4.5) {};

\node [cs,inner xsep=3mm] at (3.375,5) {};
\node [sc,inner xsep=4mm] at (4.525,5) {};
\node [sc,inner xsep=4mm] at (5.525,5) {};

\node [cs,inner xsep=3mm] at (3.375,5.5) {};
\node [sc,inner xsep=4mm] at (4.525,5.5) {};
\node [sc,inner xsep=4mm] at (5.525,5.5) {};

\node [sc,inner xsep=3mm] at (6.725,5.5) {};
\node [sc,inner xsep=1.5mm] at (7.375,5.5) {};
\node [sc,inner xsep=1mm] at (7.825,5.5) {};

\node [cs,inner xsep=3mm] at (3.375,6) {};
\node [sc,inner xsep=4mm] at (4.525,6) {};
\node [sc,inner xsep=4mm] at (5.525,6) {};
\node [sc,inner xsep=4mm] at (6.525,6) {};

\node [cs,inner xsep=3mm] at (6.375,6.625) {};
\node [sc,inner xsep=4mm] at (7.525,6.625) {};
\node [sc,inner xsep=4mm] at (8.525,6.625) {};

\node [cs,inner xsep=3mm] at (6.375,7.125) {};
\node [sc,inner xsep=4mm] at (7.525,7.125) {};
\node [sc,inner xsep=4mm] at (8.525,7.125) {};

\draw [] (1,3.825)   -- +(4,0)
         (3,4.5) -- +(3,0)
         (3,5)   -- +(3,0)
         (3,5.5) -- +(5,0)
         (3,6)   -- +(4,0)
         (6,6.625) -- +(3,0)
         (6,7.125)   -- +(3,0);
\end{scope}

%\draw [help lines] (sconns.north west) rectangle (sconns.south east);

\node [annote] at (sconns -| ancol) {%
   \emph{Simultaneous connections} provide parallelism without
   any protocol changes; the client simply makes more than one
   TCP connection and transmits a request on each. However, this
   incurs substantial server-side overhead, so clients must limit
   themselves to only a few connections per server, producing this
   characteristic connection pattern.  First the HTML page is retrieved
   by itself, then the images and other resources required to render it
   are retrieved in batches of four to eight.  Clients try to parse the
   page for its resources while it is still downloading.
};

\begin{scope}[xshift=-0.75cm,local bounding box=keepalive]
\node [cs,inner xsep=2mm] at (1.275,9.5) {};
\node [sc,inner xsep=3mm] at (2.125,9.5) {};
\node [cs,inner xsep=2mm] at (3.25,9.5) {};
\node [sc,inner xsep=3mm] at (4,9.5) {};
\node [sc,inner xsep=3mm] at (4.825,9.5) {};
\node [cs,inner xsep=2mm] at (5.875,9.5) {};
\node [sc,inner xsep=3mm] at (6.625,9.5) {};

\node [cs,inner xsep=2mm] at (3.275,10.125) {};
\node [sc,inner xsep=3mm] at (4,10.125) {};
\node [sc,inner xsep=3mm] at (4.825,10.125) {};

\node [cs,inner xsep=2mm] at (5.875,10.125) {};
\node [sc,inner xsep=3mm] at (6.625,10.125) {};
\node [sc,inner xsep=3mm] at (7.625,10.125) {};
\node [sc,inner xsep=3mm] at (8.625,10.125) {};


\draw (1,9.5) -- +(6,0)
      (3,10.125) -- +(6,0) ;
\end{scope}

%\draw [help lines] (keepalive.north west) rectangle (keepalive.south east);

\node [annote] at (keepalive -| ancol) {%
   \emph{Keep-alives} augment the protocol to
   allow one TCP connection to carry a sequence of requests and responses.
   Still, only one side can transmit at any point in time, and the server
   cannot respond to requests out of order.  Keep-alives are now ubiquitous.
};

\begin{scope}[xshift=-0.75cm,yshift=0.5cm,local bounding box=pipelining]

\node [cs, inner xsep=2mm] at (1.275, 13) {};
\node [cs, inner xsep=2mm,fill=red!90!black] at (2, 13) {};
\node [cs, inner xsep=2mm,fill=green!60!black] at (2.725, 13) {};
\node [cs, inner xsep=2mm,fill=blue!50] at (3.5, 13) {};

\node [sc, inner xsep=2.5mm]                     at (2, 13) {};
\node [sc, inner xsep=3mm,fill=red!90!black]   at (3, 13) {};
\node [sc, inner xsep=3mm,fill=red!90!black]   at (3.9, 13) {};
\node [sc, inner xsep=3mm,fill=red!90!black]   at (4.8, 13) {};
\node [sc, inner xsep=3mm,fill=green!60!black] at (5.9, 13) {};
\node [sc, inner xsep=3mm,fill=green!60!black] at (6.8, 13) {};
\node [sc, inner xsep=3mm,fill=blue!50]        at (8, 13) {};

\draw (1,13) -- +(7.375,0) ;
\end{scope}

%\draw [help lines] (pipelining.north west) rectangle (pipelining.south east);

\node [annote] at (pipelining -| ancol) {%
   \emph{Pipelining}, another protocol enhancement, allows the client to
   send several requests without waiting for a response.  The server
   must still respond to requests in order.  Pipelining is rarely used
   on the public Web, due to buggy implementations.
};

\begin{scope}[xshift=-0.75cm,yshift=-0.5cm,local bounding box=tls]
\node [csctrl,label={syn}] at (1.075,15) {};
\node [scctrl,label={$\mbox{syn}\atop\mbox{ack}$}] at (1.325,15) {};
\node [csctrl,label={ack}] at (1.575,15) {};

\node [cs,inner xsep=0.5mm,label={$\mbox{Client}\atop\mbox{Hello}$}] at (2.3,15) {};
\node [sc,inner xsep=1mm,label={$\mbox{Server}\atop\mbox{Hello}$}] at (2.7,15) {};
\node [sc,inner xsep=1.5mm,label={Cert}] at (3.3,15) {};
\node [cs,inner xsep=0.5mm,label={Key}] at (3.8,15) {};
\node [cs,inner xsep=0.5mm,label={DH}] at (4.25,15) {};
\node [sc,inner xsep=0.5mm,label={DH}] at (4.6,15) {};

\node [cs,inner xsep=4mm,label={Request},fill=red!90!black] at (5.5,15) {};
\node [sc,inner xsep=4mm,fill=red!90!black] at (6.6,15) {};
\node [sc,inner xsep=4mm,fill=red!90!black,label={\kern-5em Response\ldots}] at (7.6,15) {};

\draw [] (1,15) -- (8.075,15) ;
\node [right] at (8.075,15) {\Large \ldots};
\end{scope}

%\draw [help lines] (tls.north west) rectangle (tls.south east);

\node [annote] at (tls -| ancol) {%
   \emph{TLS} (formerly called \emph{SSL}) is a secure channel protocol
   inserted between HTTP and TCP.  TLS encrypts application data (shown in red)
   but does not affect its packetization; the HTTP query-response pattern is
   still apparent.  It also adds setup overhead to each connection, making
   keep-alives more important.
};
\end{tikzpicture}
\caption{Illustrative HTTP packet traces (not to scale)}
\label{f:packet-trace}
\end{figure*}
\endgroup\endinput
